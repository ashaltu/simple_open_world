allprojects {
    apply plugin: 'java'
    apply plugin: 'application'

    group 'org.ashaltu'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }

    application {
        mainClassName = 'Launcher'
    }

    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }

    javadoc {
        options.tags = ["spec.modifies:a:Modifies:", "spec.effects:a:Effects:",
                        "spec.requires:a:Requires:", "spec.specfield:a:Specfield:",
                        "spec.derivedfield:a:Derived Field:"]
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    }

    task cleanByRenaming {
        description = 'Use this when the "clean" target fails due to "unable to delete file" "device or resource busy".'
        doLast {
            File destinationDir = new File("${buildDir}", "deleteme-" + new Random().nextInt(1000000))
            mkdir destinationDir
            println "destinationDir = " + destinationDir
            buildDir.eachFile { f ->
                println "Processing " + f
                f.renameTo(new File(destinationDir, f.getName()))
            }
        }
    }
}

///
/// Testing
///
allprojects {
    tasks.withType(Test) {
        enableAssertions = true
    }

    tasks.withType(JavaExec) {
        enableAssertions = true
    }

    test {
        testLogging {
            events "failed", "skipped"
            setShowStandardStreams true
            setShowExceptions true
            exceptionFormat "full"
        }
    }

}

// This block directs gradle to the location of the spotbugs plugin.
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
    }
}

allprojects {
    task validate {
        group = "verification"
        description = "Validate the working copy. Ensures that the project builds, a javadoc is generated, and student tests run."
        dependsOn clean
        dependsOn compileJava
        dependsOn compileTestJava
        dependsOn javadoc
        dependsOn test
    }

    apply plugin: "com.github.spotbugs"

    spotbugs {
        ignoreFailures true // Allow the build to continue if there are warnings.
        sourceSets = []
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        group = "verification"
        reports.xml.enabled = false
        reports.html.enabled = true
        showProgress = true
    }
}